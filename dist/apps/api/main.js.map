{"version":3,"file":"main.js","mappings":"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","sources":["webpack://pagination/./apps/api/src/app/movies/movies.controller.ts","webpack://pagination/./apps/api/src/app/movies/movies.service.ts","webpack://pagination/./apps/api/src/app/routes.ts","webpack://pagination/./apps/api/src/config/db.ts","webpack://pagination/./apps/api/src/utils/paginate.ts","webpack://pagination/external commonjs \"cors\"","webpack://pagination/external commonjs \"express\"","webpack://pagination/external commonjs \"mysql\"","webpack://pagination/external commonjs \"tslib\"","webpack://pagination/webpack/bootstrap","webpack://pagination/./apps/api/src/main.ts"],"sourcesContent":["import { Request, Response, Router } from 'express';\r\nimport * as MovieService from './movies.service';\r\nimport { paginate } from '../../utils/paginate';\r\n\r\n const moviesRoutes = Router();\r\n\r\n moviesRoutes.get('/', async (req: Request, res: Response) => {\r\n    try {\r\n\r\n        const limit = parseInt((req.query.limit as string), 10) || 1000;\r\n        const offset = parseInt((req.query.offset as string), 10) || 0;\r\n        const order = (req.query?.order as string) ?? 'title';\r\n        const sort = (req.query?.sort as string) ?? 'asc';\r\n\r\n        const nbData = await MovieService.getNbMovies();\r\n\r\n        const pagination = paginate({ offset,  limit, order, sort }, nbData[0].numRows);\r\n        \r\n        if('err' in pagination){\r\n            res.status(400).json({ ...pagination });\r\n        }\r\n\r\n        const movies = await MovieService.getMovies({offset,  limit, order, sort});\r\n    \r\n        res.status(200).json({\r\n            results: movies,\r\n            ...pagination\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('[movies.controller][getMovies][Error] ', typeof error === 'object' ? JSON.stringify(error) : error);\r\n        res.status(500).json({\r\n          message: 'There was an error when fetching movies'\r\n        });\r\n    }\r\n});\r\n\r\nexport default moviesRoutes;","import { Request, RequestHandler, Response } from 'express';\r\nimport { Movie } from './movies.model';\r\nimport { execute } from '../../config/db';\r\nimport { QueryPaginate } from '../../utils/paginate';\r\n\r\n/**\r\n * gets movies\r\n */\r\nexport const getMovies = async (paginate: QueryPaginate ) => {\r\n    const orderby = {\r\n        film_id: 'F.film_id',\r\n        title: 'F.title',\r\n        rating: 'F.rating',\r\n        rental_rate: 'F.rental_rate',\r\n        category: 'category',\r\n        total_rental: 'total_rental',\r\n    }\r\n    let query = `\r\n        SELECT F.film_id, F.title, F.rating, F.rental_rate, cat.name AS category, COUNT(inv.inventory_id) AS total_rental FROM film F \r\n        LEFT JOIN film_category fc ON fc.film_id = F.film_id\r\n        LEFT JOIN category cat ON cat.category_id = fc.category_id\r\n        LEFT JOIN inventory inv ON inv.film_id = F.film_id\r\n        GROUP BY F.film_id\r\n        ORDER BY ${orderby[paginate.order]} ${paginate.sort.toUpperCase()}\r\n        LIMIT ${paginate.limit}\r\n        OFFSET ${paginate.offset}\r\n    `;\r\n\r\n    return execute<{movies:Movie[]}>(query, []);\r\n};\r\n\r\nexport const getNbMovies = async () => {\r\n    return execute<{movies:{numRows: number}}>(`SELECT count(*) as numRows FROM film`, []);\r\n};","import moviesRoutes from './movies/movies.controller';\r\n\r\nexport { moviesRoutes }\r\n","import { createPool, Pool} from 'mysql';\r\n\r\nlet pool: Pool;\r\n\r\n/**\r\n * generates pool connection to be used throughout the app\r\n */\r\nexport const init = () => {\r\n  try {\r\n    pool = createPool({\r\n      connectionLimit: 4,\r\n      host: 'unixshell.hetic.glassworks.tech',\r\n      port: 27116,\r\n      user: 'student',\r\n      password: 'Tk0Uc2o2mwqcnIA',\r\n      database: 'sakila',\r\n    });\r\n\r\n    console.debug('MySql Adapter Pool generated successfully');\r\n  } catch (error) {\r\n    console.error('[mysql.connector][init][Error]: ', error);\r\n    throw new Error('failed to initialized pool');\r\n  }\r\n};\r\n\r\n/**\r\n * executes SQL queries in MySQL db\r\n *\r\n * @param {string} query - provide a valid SQL query\r\n * @param {string[] | Object} params - provide the parameterized values used\r\n * in the query\r\n */\r\nexport const execute = <T>(query: string, params: string[] | Object): Promise<T> => {\r\n  try {\r\n    if (!pool) throw new Error('Pool was not created. Ensure pool is created when running the app.');\r\n\r\n    return new Promise<T>((resolve, reject) => {\r\n      pool.query(query, params, (error, results) => {\r\n        if (error) reject(error);\r\n        else resolve(results);\r\n      });\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('[mysql.connector][execute][Error]: ', error);\r\n    throw new Error('failed to execute MySQL query');\r\n  }\r\n}","export interface QueryPaginate {\r\n    offset: number;\r\n    limit: number;\r\n    order: string;\r\n    sort: string\r\n}\r\n\r\n\r\nexport const paginate = (query: QueryPaginate, totalDataRows: number)=> {\r\n    let numRows: number;\r\n    let numPages: number;\r\n    const numPerPage = query.limit;\r\n    const page = query.offset;\r\n\r\n    numRows = totalDataRows;\r\n    numPages = Math.ceil(numRows / numPerPage);\r\n\r\n    if (page > numPages) {\r\n        return {\r\n            err: 'queried page ' + page + ' is >= to maximum page number ' + numPages\r\n        }\r\n    }\r\n\r\n    return {\r\n        total: totalDataRows,\r\n        order: query.order,\r\n        sort: query.sort,\r\n        current: page,\r\n        perPage: numPerPage,\r\n        previous: page > 0 ? page - 1 : undefined,\r\n        next: page < numPages - 1 ? page + 1 : undefined\r\n    }\r\n}","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"mysql\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport * as express from 'express';\r\nimport { moviesRoutes } from './app/routes';\r\nimport * as MySQLConnector from './config/db';\r\nimport * as cors from 'cors';\r\n\r\nconst app = express();\r\n\r\n// create database pool\r\nMySQLConnector.init();\r\n\r\n// parse incoming request body and append data to `req.body`\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: true }));\r\n\r\napp.use(cors());\r\n\r\napp.get('/api', (req, res) => {\r\n  res.send({ message: 'Welcome to api!' });\r\n});\r\n\r\napp.use('/api/movies', moviesRoutes);\r\n\r\nconst port = process.env.port || 3333;\r\nconst server = app.listen(port, () => {\r\n  console.log(`Listening at http://localhost:${port}/api`);\r\n});\r\nserver.on('error', console.error);\r\n"],"names":[],"sourceRoot":""}